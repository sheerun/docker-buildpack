#!/bin/bash

set -e

export app_path=/app
export buildpack_path=/opt
export env_path=/tmp/env
export cache_path=/tmp/cache

fn-args() {
	declare desc="Inspect a function's arguments"
	local argline=$(type $1 | grep declare | grep -v "declare desc" | head -1)
	echo -e "${argline// /"\n"}" | awk -F= '/=/{print "<"$1">"}' | tr "\n" " "
}

fn-desc() {
	declare desc="Inspect a function's description"
	desc=""
	eval "$(type $1 | grep desc | head -1)"; echo $desc
}

fn-info() {
	declare desc="Inspects a function"
	declare fn="$1" showsource="$2"
	echo "$fn $(fn-args $fn)"
	echo "  $(fn-desc $fn)"
	echo
	if [[ "$showsource" ]]; then
		type $fn | tail -n +2
		echo
	fi
}

declare -A CMDS

cmd-list() {
	declare desc="Lists available commands"
	declare ns="$1"
	cmd-list-keys "$ns" | sed "s/$ns://"
}

cmd-list-keys() {
	declare ns="$1"
	for k in "${!CMDS[@]}"; do
		echo "$k"
	done | grep "^$ns:" | sort
}

cmd-list-ns() {
	for k in "${!CMDS[@]}"; do
		echo "$k"
	done | grep -v : | sort
}

cmd-export() {
	declare desc="Exports a function as a command"
	declare fn="$1" as="${2:-$1}"
	local ns=""
	for n in $(cmd-list-ns); do
		echo "$fn" | grep "^$n-" &> /dev/null && ns="$n"
	done
	CMDS["$ns:${as/#$ns-/}"]="$fn"
}

cmd-export-ns() {
	declare ns="$1" desc="$2"
	eval "$1() {
		declare desc=\"$desc\"
		cmd-ns $1 \"\$@\";
	}"
	cmd-export "$1"
	CMDS["$1"]="$1"
}

cmd-ns() {
	local ns="$1"; shift
	local cmd="$1"; shift || true
	local status=0
	if cmd-list "$ns" | grep ^$cmd\$ &> /dev/null; then
		${CMDS["$ns:$cmd"]} "$@"
	else
		if [[ "$cmd" ]]; then
			echo "No such command: $cmd"
			status=2
		elif [[ "$ns" ]]; then
			echo "$(fn-desc "$ns")"
		fi
		echo
		echo "Available commands:"
		for cmd in $(cmd-list "$ns"); do
			printf "  %-24s %s\n" "$cmd" "$(fn-desc "${CMDS["$ns:$cmd"]}")"
			for subcmd in $(cmd-list "$cmd"); do
				printf "    %-24s %s\n" "$subcmd" "$(fn-desc "${CMDS["$cmd:$subcmd"]}")"
			done
		done
		echo
		exit $status
	fi
}
cmd-help() {
	declare desc="Shows help information for a command"
	declare args="$@"
	if [[ "$args" ]]; then
    	for cmd; do true; done # last arg
    	local ns="${args/%$cmd/}"; ns="${ns/% /}"; ns="${ns/ /-}"
    	local fn="${CMDS["$ns:$cmd"]}"
    	fn-info "$fn" 1
	else
		cmd-ns ""
	fi
}
cmd-export cmd-help help

ensure-paths() {
	mkdir -p \
		"$app_path" \
		"$env_path" \
		"$cache_path" \
		"$buildpack_path"
}

download() {
	declare desc="Install buildpack from Git URL and optional branch"
	declare url="$1" branch="$2" name="$3"
	local target_path="$buildpack_path/${name:-$(basename $url)}"
	if [[ "$(git ls-remote "$url" &> /dev/null; echo $?)" -eq 0 ]]; then
		if [[ "$branch" ]]; then
			echo "Installing $url#$branch..."
			echo "Cloning into '$target_path'..."
			git clone --branch "$branch" --quiet --depth 1 "$url" "$target_path" > /dev/null
		else
			echo "Installing $url..."
			echo "Cloning into '$target_path'..."
			git clone --quiet --depth=1 "$url" "$target_path" > /dev/null
		fi
	else
		local tar_args
		case "$url" in
			*.tgz|*.tar.gz)
				target_path="${target_path//.tgz}"
				target_path="${target_path//.tar.gz}"
				tar_args="-xzC"
			;;
			*.tbz|*.tar.bz)
				target_path="${target_path//.tbz}"
				target_path="${target_path//.tar.bz}"
				tar_args="-xjC"
			;;
			*.tar)
				target_path="${target_path//.tar}"
				tar_args="-xC"
			;;
		esac
		echo "Downloading '$url' into '$target_path'..."
		mkdir -p "$target_path"
		curl -s --retry 2 "$url" | tar "$tar_args" "$target_path"
		chown -R root:root "$target_path"
		chmod 755 "$target_path"
	fi
	rm -rf "$target_path/.git"
}

setup() {
	local buildpacks=($buildpack_path/*)
	for buildpack in "${buildpacks[@]}"; do
		if [ -e $buildpack/export ]; then
			source $buildpack/export
		fi
	done
}

compile() {
	declare name="$1"

	echo "Compiling $name..."

	setup

	chmod a+x "$buildpack_path/$name/bin/compile"

	"$buildpack_path/$name/bin/compile" "$app_path" "$cache_path" "$env_path"

	if [ -e "$buildpack_path/$name/bin/release" ]; then
		chmod a+x "$buildpack_path/$name/bin/release"
		"$buildpack_path/$name/bin/release" "$app_path" "$cache_path" > "$app_path/.release"
		ruby -e "require 'yaml';((YAML.load_file(ENV['app_path'] + '/.release') || {})['config_vars'] || {}).each{|k,v| puts \"#{k}=\\\"#{v}\\\"\"}" >> "$app_path/.env.production"
	fi

	rm -rf "$cache_path"
	rm -rf "$env_path"
}

install() {
	ensure-paths

	declare url="${1%#*}" branch="${1#*#}"

	if [ "$branch" == "$url" ]; then
		branch=""
	fi

	if [[ ! "$url" ]]; then
		for buildpack in $(cat .buildpacks); do
			install "$buildpack"
		done

		return
	fi

	declare last="${url##*/}"
	declare name="${last%.*}"

	download "$url" "$branch" "$name"

	compile "$name"
}

cmd-export install

cmd-ns "" "$@";
